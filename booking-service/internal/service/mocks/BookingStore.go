// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/golang_falcon_task/booking-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BookingStore is an autogenerated mock type for the BookingStore type
type BookingStore struct {
	mock.Mock
}

// CreateBooking provides a mock function with given fields: ctx, userID, rideID, bookingTime
func (_m *BookingStore) CreateBooking(ctx context.Context, userID int32, rideID int32, bookingTime time.Time) (int32, error) {
	ret := _m.Called(ctx, userID, rideID, bookingTime)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, time.Time) (int32, error)); ok {
		return rf(ctx, userID, rideID, bookingTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, time.Time) int32); ok {
		r0 = rf(ctx, userID, rideID, bookingTime)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, time.Time) error); ok {
		r1 = rf(ctx, userID, rideID, bookingTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRide provides a mock function with given fields: ctx, source, destination, distance, cost
func (_m *BookingStore) CreateRide(ctx context.Context, source string, destination string, distance int32, cost int32) (int32, error) {
	ret := _m.Called(ctx, source, destination, distance, cost)

	if len(ret) == 0 {
		panic("no return value specified for CreateRide")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32, int32) (int32, error)); ok {
		return rf(ctx, source, destination, distance, cost)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32, int32) int32); ok {
		r0 = rf(ctx, source, destination, distance, cost)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int32, int32) error); ok {
		r1 = rf(ctx, source, destination, distance, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingDetails provides a mock function with given fields: ctx, bookingID
func (_m *BookingStore) GetBookingDetails(ctx context.Context, bookingID int32) (*model.Booking, *model.User, *model.Ride, error) {
	ret := _m.Called(ctx, bookingID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingDetails")
	}

	var r0 *model.Booking
	var r1 *model.User
	var r2 *model.Ride
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.Booking, *model.User, *model.Ride, error)); ok {
		return rf(ctx, bookingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.Booking); ok {
		r0 = rf(ctx, bookingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) *model.User); ok {
		r1 = rf(ctx, bookingID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32) *model.Ride); ok {
		r2 = rf(ctx, bookingID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*model.Ride)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, int32) error); ok {
		r3 = rf(ctx, bookingID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewBookingStore creates a new instance of BookingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingStore {
	mock := &BookingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
